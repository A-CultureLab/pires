generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["orderByAggregateGroup", "selectRelationCount", "orderByRelation"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// generator dbml {
//   provider            = "prisma-dbml-generator"
//   output              = "./"
//   outputName          = "schema.sql"
//   projectName         = "pires"
//   projectDatabaseType = "MySql"
// }

model User {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // get from sns login
  id                 String    @id
  email              String    @unique
  image              String
  // get from user certification
  uniqueKey          String    @unique
  name               String
  gender             Gender
  birth              DateTime
  //
  instagramId        String?
  introduce          String    @db.Text
  agreementDate      DateTime // 약관동의 일자
  marketingPushDate  DateTime? // 마케팅 푸시 수신일자
  marketingEmailDate DateTime? // 마케팅 이메일 수신일자
  fcmToken           String?
  //
  withdrawDate       DateTime? // 회원탈퇴 신철 일자
  withdrawReason     String?   @db.Text

  addressId String

  address           Address            @relation(fields: [addressId], references: [id])
  pets              Pet[]
  userChatRoomInfos UserChatRoomInfo[]
  chats             Chat[]
  iBlockedUsers     User[]             @relation("iBlockedUsersBlockMeUsers")
  blockMeUsers      User[]             @relation("iBlockedUsersBlockMeUsers")

  @@index([birth, gender])
}

model UserChatRoomInfo {
  id String @id @default(cuid())

  updatedAt DateTime @updatedAt

  joinedAt DateTime  @default(now())
  exitedAt DateTime? // UI 상에 나가기한 private 채팅방을 안보여주기 위한 Field. private 채팅인 경우 createChat 과정에서 발신자와 수신자 모두의 exitedAt = null 로 업데이트됨

  bookmarked  Boolean @default(false)
  notificated Boolean @default(true)

  userId     String
  chatRoomId String

  user         User     @relation(fields: [userId], references: [id])
  chatRoom     ChatRoom @relation(fields: [chatRoomId], references: [id])
  notReadChats Chat[]   @relation("notReadChatsNotReadUserChatRoomInfos")

  @@index([bookmarked, notificated, joinedAt])
}

model ChatRoom {
  id                  String       @id @default(cuid())
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  recentChatCreatedAt DateTime?
  type                ChatRoomType


  chats             Chat[]
  userChatRoomInfos UserChatRoomInfo[]

  @@index([recentChatCreatedAt])
}

model Chat {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  message   String?
  image     String?
  isDeleted Boolean @default(false)

  user                     User               @relation(fields: [userId], references: [id])
  chatRoom                 ChatRoom           @relation(fields: [chatRoomId], references: [id])
  notReadUserChatRoomInfos UserChatRoomInfo[] @relation("notReadChatsNotReadUserChatRoomInfos")

  userId     String
  chatRoomId String

  @@index([createdAt, userId, chatRoomId])
}

model Address {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Areas
  area1Id String
  area2Id String
  area3Id String
  landId  String

  area1 Area1 @relation(fields: [area1Id], references: [id])
  area2 Area2 @relation(fields: [area2Id], references: [id])
  area3 Area3 @relation(fields: [area3Id], references: [id])
  land  Land  @relation(fields: [landId], references: [id])
  //

  user User?

  @@index([area1Id, area2Id, area3Id, landId])
}

model Area1 {
  // 도/시
  id String @id

  latitude  Float
  longitude Float

  addresses Address[]

  @@index([id, latitude, longitude])
}

model Area2 {
  // 시/군/구
  id String @id

  latitude  Float
  longitude Float

  addresses Address[]

  @@index([id, latitude, longitude])
}

model Area3 {
  // 읍/면/동
  id String @id

  latitude  Float
  longitude Float

  addresses Address[]

  @@index([id, latitude, longitude])
}

model Land {
  // 상세주소
  id String @id // addressName + '@' + buildingName

  addressName  String // 세부주소 주소 예) 용구대로 112-3
  buildingName String // 건물 이름 예) 용산빌딩

  latitude  Float
  longitude Float

  addresses Address[]

  @@index([id, latitude, longitude])
}

model Pet {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orderKey  Int // 어레이 정렬 키

  name       String
  image      String
  type       PetType
  species    String
  character  String
  gender     Gender
  birth      DateTime
  weight     Float
  neutered   Boolean // 중성화 유무
  vaccinated Boolean // 백신 접종 유무

  user User @relation(fields: [userId], references: [id])

  userId String

  @@index([species, character, birth, weight])
}

enum Gender {
  male
  female
}

enum PetType {
  cat
  dog
}

enum ChatRoomType {
  private // 1대1 채팅
  group //   그룹채팅
  // public // 오픈채팅
}
