generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filterJson"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// generator dbml {
//   provider            = "prisma-dbml-generator"
//   output              = "./"
//   outputName          = "schema.sql"
//   projectName         = "pires"
//   projectDatabaseType = "MySql"
// }

model User {
  id                String    @id @default(cuid())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  // 필수
  phone             String    @unique
  password          String // 패스워드 해시값
  profileId         String    @unique
  image             String?
  name              String
  gender            Gender
  birth             DateTime
  // 선택
  introduce         String    @db.Text
  instagramId       String? // 인스타그램 아이디
  inflow            String // 유입 경로
  // 약관
  agreementDate     DateTime // 약관동의 일자
  marketingPushDate DateTime? // 마케팅 푸시 수신일자
  // 토큰
  refreshToken      String?
  fcmToken          String?
  //
  withdrawDate      DateTime? // 회원탈퇴 신철 일자
  withdrawReason    String?   @db.Text

  addressId String @unique

  address                    Address             @relation(fields: [addressId], references: [id])
  pets                       Pet[]
  userChatRoomInfos          UserChatRoomInfo[]
  chats                      Chat[]
  reports                    Report[]            @relation("userToReports") // 내가 신고 당한 내역
  myReports                  Report[]            @relation("userToMyReports") // 내 신고내역
  posts                      Post[]              @relation("UserToPost")
  notificatedPosts           Post[]              @relation("UserToPostNotificatedUsers")
  likedPosts                 Post[]              @relation("UserToPostLikedUsers")
  postComments               PostComment[]
  postReplyComment           PostReplyComment[]
  medias                     Media[]
  likedMedias                Media[]             @relation("UserToMediaLikedUsers")
  followers                  Follow[]            @relation("UserToFollowers")
  followings                 Follow[]            @relation("UserToFollowings")
  mediaComments              MediaComment[]
  mediaReplyComments         MediaReplyComment[]
  mediaReplyTargetedComments MediaReplyComment[] @relation("UserToMediaReplyTargetedComments")

  @@index([birth, gender, profileId, name])
}

model Follow {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  targetUser User @relation("UserToFollowers", fields: [targetUserId], references: [id])
  user       User @relation("UserToFollowings", fields: [userId], references: [id])

  targetUserId String
  userId       String

  @@index([targetUserId, userId, createdAt])
}

model UserChatRoomInfo {
  id String @id // hash ChatRoomId + key + UserId

  updatedAt DateTime @updatedAt

  joinedAt DateTime? @default(now())

  bookmarked  Boolean @default(false)
  notificated Boolean @default(true)
  blocked     Boolean @default(false)

  userId     String
  chatRoomId String

  user         User     @relation(fields: [userId], references: [id])
  chatRoom     ChatRoom @relation(fields: [chatRoomId], references: [id])
  notReadChats Chat[]   @relation("notReadChatsNotReadUserChatRoomInfos")

  @@index([bookmarked, notificated, joinedAt])
}

model ChatRoom {
  id                  String       @id @default(cuid()) // private 채팅이라면 UserId + key + UserId
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  recentChatCreatedAt DateTime?
  type                ChatRoomType


  chats             Chat[]
  userChatRoomInfos UserChatRoomInfo[]
  reports           Report[]

  @@index([recentChatCreatedAt])
}

model Chat {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  message   String?
  image     String?
  isDeleted Boolean @default(false)

  user                     User               @relation(fields: [userId], references: [id])
  chatRoom                 ChatRoom           @relation(fields: [chatRoomId], references: [id])
  notReadUserChatRoomInfos UserChatRoomInfo[] @relation("notReadChatsNotReadUserChatRoomInfos")
  reports                  Report[]

  userId     String
  chatRoomId String

  @@index([createdAt, userId, chatRoomId])
}

model Address {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Areas
  area1Id String
  area2Id String
  area3Id String
  landId  String

  area1 Area1 @relation(fields: [area1Id], references: [id])
  area2 Area2 @relation(fields: [area2Id], references: [id])
  area3 Area3 @relation(fields: [area3Id], references: [id])
  land  Land  @relation(fields: [landId], references: [id])
  //

  user User?

  @@index([area1Id, area2Id, area3Id, landId])
}

model Area1 {
  // 도/시
  id String @id //Area1

  name      String
  latitude  Float
  longitude Float

  addresses Address[]

  @@index([name, latitude, longitude])
}

model Area2 {
  // 시/군/구
  id String @id // Area1 + @ + Area2

  name      String
  latitude  Float
  longitude Float

  addresses Address[]

  @@index([name, latitude, longitude])
}

model Area3 {
  // 읍/면/동
  id String @id // Area1 + @ + Area2 + @ + Area3

  name      String
  latitude  Float
  longitude Float

  addresses Address[]

  @@index([name, latitude, longitude])
}

model Land {
  // 상세주소
  id String @id // Area1 + @ + Area2 + @ + Area3 + @ + addressName + '@' + buildingName

  addressName  String // 세부주소 주소 예) 용구대로 112-3
  buildingName String // 건물 이름 예) 용산빌딩

  latitude  Float
  longitude Float

  addresses Address[]

  @@index([id, latitude, longitude])
}

model Pet {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orderKey  Int // 어레이 정렬 키

  name      String
  image     String
  type      PetType
  species   String
  character String
  gender    Gender
  birth     DateTime
  weight    Float

  user        User    @relation(fields: [userId], references: [id])
  tagedMedias Media[]

  userId String

  @@index([species, character, birth, weight])
}

model Report {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reason   String @db.Text
  reporter User   @relation(fields: [reporterId], references: [id], "userToMyReports")

  user     User?     @relation(fields: [userId], references: [id], "userToReports")
  chat     Chat?     @relation(fields: [chatId], references: [id])
  chatRoom ChatRoom? @relation(fields: [chatRoomId], references: [id])

  reporterId String
  userId     String?
  chatId     String?
  chatRoomId String?
}

model Post {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type    PostType
  content String   @db.Text

  user             User          @relation(fields: [userId], references: [id], "UserToPost")
  images           PostImage[]
  likedUsers       User[]        @relation("UserToPostLikedUsers")
  notificatedUsers User[]        @relation("UserToPostNotificatedUsers")
  comments         PostComment[]

  userId String

  @@index([type, createdAt])
}

model PostImage {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  url String @db.LongText

  post Post? @relation(fields: [postId], references: [id])

  postId String?
}

model PostComment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content String  @db.Text
  image   String?

  user          User               @relation(fields: [userId], references: [id])
  post          Post               @relation(fields: [postId], references: [id])
  replyComments PostReplyComment[]

  postId String
  userId String

  @@index([createdAt])
}

model PostReplyComment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content String  @db.Text
  image   String?

  user        User        @relation(fields: [userId], references: [id])
  postComment PostComment @relation(fields: [postCommentId], references: [id])

  userId        String
  postCommentId String
}

model News {
  id        String   @id @default(cuid())
  createdAt DateTime

  image   String
  title   String
  content String @db.Text
  link    String @unique
}

model MediaImage {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  orderKey Int

  url     String  @db.LongText
  media   Media?  @relation(fields: [mediaId], references: [id])
  mediaId String?

  @@index([orderKey])
}

// Instagram Media도 고려하여 작성
model Media {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  images       MediaImage[]
  content      String       @db.Text
  isInstagram  Boolean      @default(false)
  instagramKey String?

  user         User?          @relation(fields: [userId], references: [id]) // 작성자
  tagedPets    Pet[] // 태그된 동물들
  likedUsers   User[]         @relation("UserToMediaLikedUsers")
  mediaComment MediaComment[]

  userId String?

  @@index([createdAt])
}

model MediaComment {
  id        String   @id @default(cuid())
  createdAt DateTime

  content String @db.Text

  user              User                @relation(fields: [userId], references: [id])
  media             Media               @relation(fields: [mediaId], references: [id])
  mediaReplyComment MediaReplyComment[]

  userId  String
  mediaId String

  @@index([createdAt])
}

model MediaReplyComment {
  id        String   @id @default(cuid())
  createdAt DateTime

  content String @db.Text

  user         User         @relation(fields: [userId], references: [id])
  targetUser   User?        @relation(fields: [targetUserId], references: [id], "UserToMediaReplyTargetedComments")
  mediaComment MediaComment @relation(fields: [mediaCommentId], references: [id])

  userId         String
  targetUserId   String?
  mediaCommentId String

  @@index([createdAt])
}

enum PostType {
  free
  walk
}

enum Gender {
  male
  female
}

enum PetType {
  cat
  dog
}

enum ChatRoomType {
  private // 1대1 채팅
  group //   그룹채팅
  // public // 오픈채팅
}
