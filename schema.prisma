generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["orderByAggregateGroup"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// generator dbml {
//   provider            = "prisma-dbml-generator"
//   output              = "./"
//   outputName          = "schema.sql"
//   projectName         = "pires"
//   projectDatabaseType = "MySql"
// }

model User {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email  String   @unique
  name   String
  image  String
  gender Gender
  birth  DateTime

  //
  instagramId        String?
  introduce          String    @db.Text
  agreementDate      DateTime // 약관동의 일자
  marketingPushDate  DateTime? // 마케팅 푸시 수신일자
  marketingEmailDate DateTime? // 마케팅 이메일 수신일자
  //
  withdrawDate       DateTime? // 회원탈퇴 신철 일자
  withdrawReason     String?   @db.Text

  addressPostcode String

  address   Address    @relation(fields: [addressPostcode], references: [postcode])
  pets      Pet[]
  chatRooms ChatRoom[]
  chats     Chat[]


  @@index([birth, addressPostcode])
}

model Address {
  postcode  String   @id // 우편번호
  updatedAt DateTime @updatedAt

  addressName  String // 풀 주소
  buildingName String // 건물 이름
  latitude     Float
  longitude    Float
  data         Json // API 결과값 캐싱
  users        User[]
}

model Pet {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orderKey  Int // 어레이 정렬 키

  name       String
  image      String
  type       PetType
  species    String
  character  String
  gender     Gender
  birth      DateTime
  weight     Float
  neutered   Boolean // 중성화 유무
  vaccinated Boolean // 백신 접종 유무

  user User @relation(fields: [userId], references: [id])

  userId String

  @@index([species, character, birth, weight])
}

model Location {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name         String
  phone        String
  // Address
  category     LocationCategory
  x            Float
  y            Float
  postCode     String
  roadAddress  String
  jibunAddress String
  //

  images LocationImage[]

  @@index([name, category, x, y])
}

model LocationImage {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  url String

  location Location? @relation(fields: [locationId], references: [id])

  locationId Int?
}

model ChatRoom {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users User[]
  chats Chat[]
}

model Chat {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  message String?
  image   String?

  user     User     @relation(fields: [userId], references: [id])
  chatRoom ChatRoom @relation(fields: [chatRoomId], references: [id])

  userId     String
  chatRoomId Int

  @@index([createdAt, userId, chatRoomId])
}

enum Gender {
  male
  female
}

enum PetType {
  cat
  dog
}

enum LocationCategory {
  hostpital
  salon
  store
}
