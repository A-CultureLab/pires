generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["orderByAggregateGroup", "selectRelationCount", "orderByRelation"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// generator dbml {
//   provider            = "prisma-dbml-generator"
//   output              = "./"
//   outputName          = "schema.sql"
//   projectName         = "pires"
//   projectDatabaseType = "MySql"
// }

model User {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // get from sns login
  id                 String    @id
  email              String    @unique
  image              String
  // get from user certification
  uniqueKey          String    @unique
  name               String
  gender             Gender
  birth              DateTime
  //
  instagramId        String?
  introduce          String    @db.Text
  agreementDate      DateTime // 약관동의 일자
  marketingPushDate  DateTime? // 마케팅 푸시 수신일자
  marketingEmailDate DateTime? // 마케팅 이메일 수신일자
  fcmToken           String?
  //
  withdrawDate       DateTime? // 회원탈퇴 신철 일자
  withdrawReason     String?   @db.Text

  addressPostcode String? // PK

  address      Address?   @relation(fields: [addressPostcode], references: [postcode])
  pets         Pet[]
  chatRooms    ChatRoom[]
  chats        Chat[]
  notReadChats Chat[]     @relation("notReadChatsNotReadUsers")


  @@index([birth, addressPostcode])
}

model Address {
  postcode  String   @id // 우편번호
  updatedAt DateTime @updatedAt

  addressName  String // 풀 주소
  buildingName String // 건물 이름
  latitude     Float
  longitude    Float
  data         Json // API 결과값 캐싱

  users User[]

  @@index([postcode, latitude, longitude])
}

model Pet {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orderKey  Int // 어레이 정렬 키

  name       String
  image      String
  type       PetType
  species    String
  character  String
  gender     Gender
  birth      DateTime
  weight     Float
  neutered   Boolean // 중성화 유무
  vaccinated Boolean // 백신 접종 유무

  user User @relation(fields: [userId], references: [id])

  userId String

  @@index([species, character, birth, weight])
}

model ChatRoom {
  id                  Int       @id @default(autoincrement())
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  recentChatCreatedAt DateTime?

  users User[]
  chats Chat[]

  @@index([recentChatCreatedAt])
}

model Chat {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  message String?
  image   String?

  user         User     @relation(fields: [userId], references: [id])
  chatRoom     ChatRoom @relation(fields: [chatRoomId], references: [id])
  notReadUsers User[]   @relation("notReadChatsNotReadUsers")

  userId     String
  chatRoomId Int

  @@index([createdAt, userId, chatRoomId])
}

enum Gender {
  male
  female
}

enum PetType {
  cat
  dog
}
